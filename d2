53,81d52
< /* Disable pointer hashing if requested */
< bool no_hash_pointers __ro_after_init;
< EXPORT_SYMBOL_GPL(no_hash_pointers);
< 
< static unsigned long long simple_strntoull(const char *startp, size_t max_chars,
< 					   char **endp, unsigned int base)
< {
< 	const char *cp;
< 	unsigned long long result = 0ULL;
< 	size_t prefix_chars;
< 	unsigned int rv;
< 
< 	cp = _parse_integer_fixup_radix(startp, &base);
< 	prefix_chars = cp - startp;
< 	if (prefix_chars < max_chars) {
< 		rv = _parse_integer_limit(cp, base, &result, max_chars - prefix_chars);
< 		/* FIXME */
< 		cp += (rv & ~KSTRTOX_OVERFLOW);
< 	} else {
< 		/* Field too short for prefix + digit, skip over without converting */
< 		cp = startp + max_chars;
< 	}
< 
< 	if (endp)
< 		*endp = (char *)cp;
< 
< 	return result;
< }
< 
92c63,74
< 	return simple_strntoull(cp, INT_MAX, endp, base);
---
> 	unsigned long long result;
> 	unsigned int rv;
> 
> 	cp = _parse_integer_fixup_radix(cp, &base);
> 	rv = _parse_integer(cp, base, &result);
> 	/* FIXME */
> 	cp += (rv & ~KSTRTOX_OVERFLOW);
> 
> 	if (endp)
> 		*endp = (char *)cp;
> 
> 	return result;
127,141d108
< static long long simple_strntoll(const char *cp, size_t max_chars, char **endp,
< 				 unsigned int base)
< {
< 	/*
< 	 * simple_strntoull() safely handles receiving max_chars==0 in the
< 	 * case cp[0] == '-' && max_chars == 1.
< 	 * If max_chars == 0 we can drop through and pass it to simple_strntoull()
< 	 * and the content of *cp is irrelevant.
< 	 */
< 	if (*cp == '-' && max_chars > 0)
< 		return -simple_strntoull(cp + 1, max_chars - 1, endp, base);
< 
< 	return simple_strntoull(cp, max_chars, endp, base);
< }
< 
152c119,122
< 	return simple_strntoll(cp, INT_MAX, endp, base);
---
> 	if (*cp == '-')
> 		return -simple_strtoull(cp + 1, endp, base);
> 
> 	return simple_strtoull(cp, endp, base);
738,739c708
< static int fill_random_ptr_key(struct notifier_block *nb,
< 			       unsigned long action, void *data)
---
> static void fill_random_ptr_key(struct random_ready_callback *unused)
743d711
< 	return 0;
746,747c714,715
< static struct notifier_block random_ready = {
< 	.notifier_call = fill_random_ptr_key
---
> static struct random_ready_callback random_ready = {
> 	.func = fill_random_ptr_key
761c729
< 	ret = register_random_ready_notifier(&random_ready);
---
> 	ret = add_random_ready_callback(&random_ready);
773,798d740
<  
< static inline int __ptr_to_hashval(const void *ptr, unsigned long *hashval_out)
< {
< 	unsigned long hashval;
< 
< 	if (static_branch_unlikely(&not_filled_random_ptr_key))
< 		return -EAGAIN;
< 
< #ifdef CONFIG_64BIT
< 	hashval = (unsigned long)siphash_1u64((u64)ptr, &ptr_key);
< 	/*
< 	 * Mask off the first 32 bits, this makes explicit that we have
< 	 * modified the address (and 32 bits is plenty for a unique ID).
< 	 */
< 	hashval = hashval & 0xffffffff;
< #else
< 	hashval = (unsigned long)siphash_1u32((u32)ptr, &ptr_key);
< #endif
< 	*hashval_out = hashval;
< 	return 0;
< }
< 
< int ptr_to_hashval(const void *ptr, unsigned long *hashval_out)
< {
< 	return __ptr_to_hashval(ptr, hashval_out);
< }
806,813d747
< 	int ret;
< 
< 	/*
< 	 * Print the real pointer value for NULL and error pointers,
< 	 * as they are not actual addresses.
< 	 */
< 	if (IS_ERR_OR_NULL(ptr))
< 		return pointer_string(buf, end, ptr, spec);
821,822c755
< 	ret = __ptr_to_hashval(ptr, &hashval);
< 	if (ret) {
---
> 	if (static_branch_unlikely(&not_filled_random_ptr_key)) {
828,833c761,762
< 	return pointer_string(buf, end, (const void *)hashval, spec);
< }
< 
< static char *default_pointer(char *buf, char *end, const void *ptr,
< 			     struct printf_spec spec)
< {
---
> #ifdef CONFIG_64BIT
> 	hashval = (unsigned long)siphash_1u64((u64)ptr, &ptr_key);
835,836c764,765
< 	 * default is to _not_ leak addresses, so hash before printing,
< 	 * unless no_hash_pointers is specified on the command line.
---
> 	 * Mask off the first 32 bits, this makes explicit that we have
> 	 * modified the address (and 32 bits is plenty for a unique ID).
838,841c767,771
< 	if (unlikely(no_hash_pointers))
< 		return pointer_string(buf, end, ptr, spec);
< 
< 	return ptr_to_id(buf, end, ptr, spec);
---
> 	hashval = hashval & 0xffffffff;
> #else
> 	hashval = (unsigned long)siphash_1u32((u32)ptr, &ptr_key);
> #endif
> 	return pointer_string(buf, end, (const void *)hashval, spec);
853c783
< 		return default_pointer(buf, end, ptr, spec);
---
> 		return ptr_to_id(buf, end, ptr, spec);
2077,2098d2006
< static int __init no_hash_pointers_enable(char *str)
< {
< 	no_hash_pointers = true;
< 
< 	pr_warn("**********************************************************\n");
< 	pr_warn("**   NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE   **\n");
< 	pr_warn("**                                                      **\n");
< 	pr_warn("** This system shows unhashed kernel memory addresses   **\n");
< 	pr_warn("** via the console, logs, and other interfaces. This    **\n");
< 	pr_warn("** might reduce the security of your system.            **\n");
< 	pr_warn("**                                                      **\n");
< 	pr_warn("** If you see this message and you are not debugging    **\n");
< 	pr_warn("** the kernel, report this immediately to your system   **\n");
< 	pr_warn("** administrator!                                       **\n");
< 	pr_warn("**                                                      **\n");
< 	pr_warn("**   NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE   **\n");
< 	pr_warn("**********************************************************\n");
< 
< 	return 0;
< }
< early_param("no_hash_pointers", no_hash_pointers_enable);
< 
2282,2283d2189
< 	default:
< 		return default_pointer(buf, end, ptr, spec);
2284a2191,2193
> 
> 	/* default is to _not_ leak addresses, hash before printing */
> 	return ptr_to_id(buf, end, ptr, spec);
3430,3432c3339,3341
< 			val.s = simple_strntoll(str,
< 						field_width >= 0 ? field_width : INT_MAX,
< 						&next, base);
---
> 			val.s = qualifier != 'L' ?
> 				simple_strtol(str, &next, base) :
> 				simple_strtoll(str, &next, base);
3434,3436c3343,3357
< 			val.u = simple_strntoull(str,
< 						 field_width >= 0 ? field_width : INT_MAX,
< 						 &next, base);
---
> 			val.u = qualifier != 'L' ?
> 				simple_strtoul(str, &next, base) :
> 				simple_strtoull(str, &next, base);
> 
> 		if (field_width > 0 && next - str > field_width) {
> 			if (base == 0)
> 				_parse_integer_fixup_radix(str, &base);
> 			while (next - str > field_width) {
> 				if (is_sign)
> 					val.s = div_s64(val.s, base);
> 				else
> 					val.u = div_u64(val.u, base);
> 				--next;
> 			}
> 		}
